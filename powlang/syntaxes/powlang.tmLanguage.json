{
  "scopeName": "source.powlang",
  "name": "PowLang",
  "patterns": [
    {
      "name": "comment.line.double-slash.powlang",
      "begin": "#",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.powlang"
        }
      },
      "end": "$",
      "patterns": [
        {
          "match": ".",
          "name": "comment.line.double-slash.powlang"
        }
      ]
    },
    {
      "name": "keyword.control.powlang",
      "match": "\\b(define|number|string|show|when|as|ala|otw)\\b"
    },
    {
      "name": "constant.language.boolean.powlang",
      "match": "\\b(true|false)\\b"
    },
    {
      "name": "keyword.operator.powlang",
      "match": "(=e|=s|=i|\\+|\\-|\\*|\\/|>|<|>=|<=|==|%)"
    },
    {
      "name": "constant.numeric.powlang",
      "match": "\\b-?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?\\b"
    },
    {
      "name": "string.quoted.double.powlang",
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.powlang"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.powlang"
        }
      },
      "patterns": [
        {
          "name": "constant.character.escape.powlang",
          "match": "\\\\."
        }
      ]
    },
    {
      "name": "variable.other.powlang",
      "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    },
    {
      "name": "punctuation.separator.powlang",
      "match": "[()]"
    }
  ]
}
